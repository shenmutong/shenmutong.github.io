* QJson 相关类
  QJsonArray            封装 JSON 数组                                   
QJsonDocument         读写 JSON 文档                                   
QJsonObject           封装 JSON 对象                                   
QJsonObject::iterator 用于遍历 QJsonObject 的 STL 风格的非 const 遍历器
QJsonParseError       报告 JSON 处理过程中出现的错误                   
QJsonValue            封装 JSON 值                                     

QJsonArray.push_back(const QJsonValue &value);
qjQ
* QJson 具体使用
JSON(JavaScript Object Notation)是一种轻量级的数据交换格式。它基于JavaScript（Standard ECMA-262 3rd Edition - December 1999）的一个子集。 JSON采用完全独立于语言的文本格式，但是也使用了类似于C语言家族的习惯（包括C、C++、C#、Java、JavaScript、Perl、Python等）。这些特性使JSON成为理想的数据交换语言。易于人阅读和编写，同时也易于机器解析和生成。

常用的Json库
JsonCpp
    JsonCpp是一个C++用来处理JSON数据的开发包。
    网址：http://jsoncpp.sourceforge.net/.
cJSON
    cJSON是一个超轻巧，携带方便，单文件，简单的可以作为ANSI-C标准的JSON解析器。
    网址：http://sourceforge.net/projects/cjson/.
QJson
    QJson是一个基于Qt的开发包用来将JSON数据解析成QVariant对象，JSON的数组将被映射为QVariantList实例，而其他对象映射为QVariantMap实例。
    网址：http://qjson.sourceforge.net/.

    关于Qt中对JSON的生成与解析，Qt5以前的版本，需要去进行单独下载、编译，才能使用。到了Qt5，提供了专门的QJsonDocument类来读取和写入JSON文档。

Qt5中JSON的生成与解析
QJsonDocument
    QJsonDocument既可以从一个基于文本表示的UTF-8编码，又可以从Qt自己的二进制格式读取和写入这个文件。
    JSON文档可以从它的基于文本的表示使用QJsonDocument::fromJson()转换为QJsonDocument，用.toJSON()将其转换回文字。解析器非常快速和高效，将JSON转换为二进制表示。
QJsonObject
    QJsonObject类用于封装JSON对象。
    JSON对象是键值对，其中键是唯一的字符串，其值由QJsonValue代表。一个QJsonObject可以从QVariantMap转换/被转换。
QJsonArray
    QJsonArray类用于封装JSON数组。
    一个JSON数组列表值。该列表可以通过从阵列插入和移除QJsonValue的操纵。一个QJsonArray可以从QVariantList转换为/被转换。

    QJsonDocument有效解析后的文档可以使用!iSNull()判断。使用isArray()和isObject()来判断是否包含一个数组或对象。文档中包含的数组或对象可以使用array()或object()进行检索，然后读取或操纵。

示例
QJsonObject
（1）生成Json
#+BEGIN_SRC C++
QJsonObject json;
json.insert("name", QString("Qt"));
json.insert("version", 5);
json.insert("windows", true);

QJsonDocument document;
document.setObject(json);
QByteArray byte_array = document.toJson(QJsonDocument::Compact);
QString json_str(byte_array);
#+END_SRC

结果：
json_str：{"name": "Qt","version": 5,"windows": true}

（2）解析Json
#+BEGIN_SRC C++
QJsonParseError json_error;
QJsonDocument parse_doucment = QJsonDocument::fromJson(byte_array, &json_error); 
if(json_error.error == QJsonParseError::NoError) 
{  
    if(parse_doucment.isObject())  
    {  
        QJsonObject obj = parse_doucment.object(); 
        if(obj.contains("name"))  
        {  
           QJsonValue name_value = obj.take("name");
    if(name_value.isString())
    {
        QString name = name_value.toString();
    }
} 
if(obj.contains("version"))  
{  
    QJsonValue version_value = obj.take("version");
    if(version_value.isDouble())
    {
int version = version_value.toVariant().toInt();
    }
} 
if(obj.contains("windows"))
{
    QJsonValue version_value = obj.take("windows");
    if(version_value.isBool())
    {
bool flag = version_value.toBool();
    } 
}
    }  
}  
#+END_SRC
结果：
name：Qt
version：5
windows：true

QJsonArray
（1）生成Json
#+BEGIN_SRC C++
QJsonArray json;
json.insert(0, QString("Qt"));
json.insert(1, QString("version"));
json.insert(2, true);

QJsonDocument document;
document.setArray(json);
#+END_SRC