#+TITLE: udacity 无人驾驶课程 开发环境配置过程
#+AUTHOR:shen.mutong
#+EMAIL:shenmutong@hotmail.com
* 介绍
  目前在学习优达学城的无人驾驶课程，在DeepLearning这一阶段的学习过程中，使用的了anaconda和tensorflow，在此过程中出现了一些问题。最终解决，现记录一下。
* 软硬件环境
| 系统     | ubuntu 16.04 64bit |
| shell    | zsh                |
| 型号     | alw15              |
| 内存     | 16G                |
| 独立显卡 | Nvdia Geforce 970m |
| 硬盘     | 128G SSD +1TB HD   |
* 配置python开发环境(pyenv 和 anaconda)
考虑到系统初始版本python为2.7.更改后可能使用其他软件会存在问题，如geeknote等，所以首先安装pyenv.
** 安装pyenv
执行 ： 
#+begin_src bash
curl -L https://raw.githubusercontent.com/yyuu/pyenv-installer/master/bin/pyenv-installer | bash
#+end_src
在~/.zshrc 中加入如下：
#+begin_src bash
export PATH="/home/shenmutong/.pyenv/bin:$PATH"
eval "$(pyenv init -)"
eval "$(pyenv virtualenv-init -)"
#+end_src
完成后执行source ~/.zshrc,使操作生效。
** 安装python(anaconda)
#+begin_src bash
pyenv install --list  #列出pyenv可以安装的python 版本。
#+end_src
使用pyenv 安装python 版本，可以直接执行:
#+begin_src bash
pyenv install anaconda3-4.2.0
#+end_src
因为我是在中国，所以因为你懂得的原因过程异常痛苦，所以直接在 [[https://www.continuum.io/downloads][anaconda下载地址]] 下载python3.5 version的 anaconda4.2.0 for linux。
下载好的文件是'Anaconda3-4.2.0-Linux-x86_64.sh。复制或移动该文件到~/.pyenv/cache/下，然后执行
#+begin_src bash
pyenv install anaconda3-4.2.0
#+end_src
pyenv在安装之前会在~/.pyenv/cache 查找是否存在安装包，若存在，则会直接进行安装。
另外，记得好像可以更换pyenv 的源，没有去确定，各位也可以试一下。
** pyenv 使用
#+begin_src bash
pyenv rehash # 更新数据库
#在安装 Python 或者其他带有可执行文件的模块之后，需要对数据库进行更新

pyenv versions # 查看当前已安装的 python 版本
pyenv global anaconda3-4.2.0 #设置全局的 python 版本
pyenv local anaconda3-4.2.0 # 更改当前目录下python版本
pyenv shell anaconda3-4.2.0 # 更改当前shell环境下 python 版本

pyenv uninstall #卸载某个版本python
pyenv update # 更新 pyenv 及其插件
#+end_src

更多使用可以参考https://github.com/yyuu/pyenv
至此python环境 安装完成。
* 安装tensorflow
注意：如果没有CUDA SDK 情况下直接安装tensorflow gpu 版本的话，在使用过程中使用import tensorflow 会出现一个比较奇怪的错误，
'Error importing tensorflow. Unless you are using bazel, you should not try to import tensorflow from its source directory '。
当时脑残的用了很久来解决这个问题，后来才发现是因为没有安装CUDASDK的原因。
** 安装pip
如果没有安装pip的话 ，使用该命令进行安装。
#+begin_src bash
sudo apt-get install python-pip python-dev
#+end_src


** 安装CUDA 
一下内容直接复制于  [[https://www.tensorflow.org/get_started/os_setup#optional_install_cuda_gpus_on_linux]]
Check NVIDIA Compute Capability of your GPU card

https://developer.nvidia.com/cuda-gpus

Download and install Cuda Toolkit

https://developer.nvidia.com/cuda-downloads

Install version 8.0 if using our binary releases.

Install the toolkit into e.g. /usr/local/cuda.

Download and install cuDNN

https://developer.nvidia.com/cudnn

Download cuDNN v5.1.

Uncompress and copy the cuDNN files into the toolkit directory. Assuming the toolkit is installed in /usr/local/cuda, run the following commands (edited to reflect the cuDNN version you downloaded):
#+begin_src bash
tar xvzf cudnn-8.0-linux-x64-v5.1-ga.tgz
sudo cp -P cuda/include/cudnn.h /usr/local/cuda/include
sud片～o cp -P cuda/lib64/libcudnn* /usr/local/cuda/lib64
sudo chmod a+r /usr/local/cuda/include/cudnn.h /usr/local/cuda/lib64/libcudnn*
#Install other dependencies
sudo apt-get install libcupti-dev
#+end_src
** 安装tensorflow 

在使用anaconda配置的 目录下，或切换当前shell到andconda 环境中。
#+begin_src bash

# Ubuntu/Linux 64-bit, CPU only, Python 3.5
export TF_BINARY_URL=https://storage.googleapis.com/tensorflow/linux/cpu/tensorflow-0.12.1-cp35-cp35m-linux_x86_64.whl
# Ubuntu/Linux 64-bit, GPU enabled, Python 3.5
# Requires CUDA toolkit 8.0 and CuDNN v5. For other versions, see "Installing from sources" below.
export TF_BINARY_URL=https://storage.googleapis.com/tensorflow/linux/gpu/tensorflow_gpu-0.12.1-cp35-cp35m-linux_x86_64.whl
pip3 install --upgrade $TF_BINARY_URL
#+end_src
搞定
* jupyter notebook 远程配置
可以在 ~/.jupyter/jupyter_notebook_config.py 
中修改配置文件，设定密码。但是这样设置后可能在emacs无法使用。
所以建立一个ssh通道时比较好的方法，如下：
#+begin_src bash
ssh username@address_of_remote -L127.0.1:1234:127.0.0.1:8888
#+end_src
这样建立通道后，在客户端就可以通过emacs 的ein 使用1234端口进行访问了。
* 参考
https://github.com/yyuu/pyenv
https://www.tensorflow.org/get_started/os_setup#optional_install_cuda_gpus_on_linux
* 联系
如果大家有问题，欢迎讨论。我的邮箱是
shenmutong@hotmail.com